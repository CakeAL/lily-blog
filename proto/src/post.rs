// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Post {
    #[prost(int32, tag = "1")]
    pub id: i32,
    /// 标题
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    /// 标签
    #[prost(int32, repeated, tag = "3")]
    pub tag_id: ::prost::alloc::vec::Vec<i32>,
    /// 摘要
    #[prost(string, tag = "4")]
    pub summary: ::prost::alloc::string::String,
    /// markdown 文件的路径
    #[prost(string, tag = "5")]
    pub md_path: ::prost::alloc::string::String,
    /// 根据 markdown 生成的 html 文件路径
    #[prost(string, tag = "6")]
    pub html_path: ::prost::alloc::string::String,
    /// 点击数
    #[prost(int32, tag = "7")]
    pub hit: i32,
    /// 字数
    #[prost(int32, tag = "8")]
    pub words_len: i32,
    /// 是否删除
    #[prost(bool, tag = "9")]
    pub is_del: bool,
    /// 发布文章时间
    #[prost(message, optional, tag = "10")]
    pub publish_time: ::core::option::Option<::prost_types::Timestamp>,
    /// 最后更新时间
    #[prost(message, optional, tag = "11")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePostRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "2")]
    pub tag_id: ::prost::alloc::vec::Vec<i32>,
    /// 根据 md_path 读取 markdown 文件，然后转换为 html
    #[prost(string, tag = "3")]
    pub md_path: ::prost::alloc::string::String,
    /// 如果没有提供摘要，则自动从内容中截取
    #[prost(string, optional, tag = "4")]
    pub summary: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePostReply {
    #[prost(int32, tag = "1")]
    pub id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditPostRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "3")]
    pub tag_id: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag = "4")]
    pub md_path: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub summary: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EditPostReply {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(bool, tag = "2")]
    pub ok: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPostRequest {
    /// 页码
    #[prost(int32, optional, tag = "1")]
    pub page: ::core::option::Option<i32>,
    /// 标签
    #[prost(int32, optional, tag = "2")]
    pub tag_id: ::core::option::Option<i32>,
    /// 关键字
    #[prost(string, optional, tag = "3")]
    pub keyword: ::core::option::Option<::prost::alloc::string::String>,
    /// 是否删除
    #[prost(bool, optional, tag = "4")]
    pub is_del: ::core::option::Option<bool>,
    /// 时间区间
    #[prost(message, optional, tag = "5")]
    pub dateline_range: ::core::option::Option<DatelineRange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPostReply {
    /// 当前页码
    #[prost(int32, tag = "1")]
    pub page: i32,
    /// 总页数
    #[prost(int32, tag = "2")]
    pub page_total: i32,
    #[prost(message, repeated, tag = "3")]
    pub posts: ::prost::alloc::vec::Vec<Post>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DatelineRange {
    #[prost(message, optional, tag = "1")]
    pub start: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TogglePostRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TogglePostReply {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(bool, tag = "2")]
    pub is_del: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPostRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(bool, optional, tag = "2")]
    pub is_del: ::core::option::Option<bool>,
    /// 是否增加点击量
    #[prost(bool, optional, tag = "3")]
    pub inc_hit: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPostReply {
    #[prost(message, optional, tag = "1")]
    pub post: ::core::option::Option<Post>,
}
/// Generated client implementations.
pub mod post_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PostServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PostServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PostServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PostServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PostServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 创建文章
        pub async fn create_post(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/post.PostService/CreatePost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("post.PostService", "CreatePost"));
            self.inner.unary(req, path, codec).await
        }
        /// 修改文章
        pub async fn edit_post(
            &mut self,
            request: impl tonic::IntoRequest<super::EditPostRequest>,
        ) -> std::result::Result<tonic::Response<super::EditPostReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/post.PostService/EditPost",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("post.PostService", "EditPost"));
            self.inner.unary(req, path, codec).await
        }
        /// 根据信息搜索文章
        pub async fn list_posts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPostRequest>,
        ) -> std::result::Result<tonic::Response<super::ListPostReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/post.PostService/ListPosts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("post.PostService", "ListPosts"));
            self.inner.unary(req, path, codec).await
        }
        /// 删除/恢复文章
        pub async fn toggle_post(
            &mut self,
            request: impl tonic::IntoRequest<super::TogglePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TogglePostReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/post.PostService/TogglePost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("post.PostService", "TogglePost"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取文章
        pub async fn get_post(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPostRequest>,
        ) -> std::result::Result<tonic::Response<super::GetPostReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/post.PostService/GetPost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("post.PostService", "GetPost"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod post_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PostServiceServer.
    #[async_trait]
    pub trait PostService: Send + Sync + 'static {
        /// 创建文章
        async fn create_post(
            &self,
            request: tonic::Request<super::CreatePostRequest>,
        ) -> std::result::Result<tonic::Response<super::CreatePostReply>, tonic::Status>;
        /// 修改文章
        async fn edit_post(
            &self,
            request: tonic::Request<super::EditPostRequest>,
        ) -> std::result::Result<tonic::Response<super::EditPostReply>, tonic::Status>;
        /// 根据信息搜索文章
        async fn list_posts(
            &self,
            request: tonic::Request<super::ListPostRequest>,
        ) -> std::result::Result<tonic::Response<super::ListPostReply>, tonic::Status>;
        /// 删除/恢复文章
        async fn toggle_post(
            &self,
            request: tonic::Request<super::TogglePostRequest>,
        ) -> std::result::Result<tonic::Response<super::TogglePostReply>, tonic::Status>;
        /// 获取文章
        async fn get_post(
            &self,
            request: tonic::Request<super::GetPostRequest>,
        ) -> std::result::Result<tonic::Response<super::GetPostReply>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct PostServiceServer<T: PostService> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: PostService> PostServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PostServiceServer<T>
    where
        T: PostService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/post.PostService/CreatePost" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePostSvc<T: PostService>(pub Arc<T>);
                    impl<
                        T: PostService,
                    > tonic::server::UnaryService<super::CreatePostRequest>
                    for CreatePostSvc<T> {
                        type Response = super::CreatePostReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PostService>::create_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/post.PostService/EditPost" => {
                    #[allow(non_camel_case_types)]
                    struct EditPostSvc<T: PostService>(pub Arc<T>);
                    impl<
                        T: PostService,
                    > tonic::server::UnaryService<super::EditPostRequest>
                    for EditPostSvc<T> {
                        type Response = super::EditPostReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EditPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PostService>::edit_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EditPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/post.PostService/ListPosts" => {
                    #[allow(non_camel_case_types)]
                    struct ListPostsSvc<T: PostService>(pub Arc<T>);
                    impl<
                        T: PostService,
                    > tonic::server::UnaryService<super::ListPostRequest>
                    for ListPostsSvc<T> {
                        type Response = super::ListPostReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PostService>::list_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListPostsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/post.PostService/TogglePost" => {
                    #[allow(non_camel_case_types)]
                    struct TogglePostSvc<T: PostService>(pub Arc<T>);
                    impl<
                        T: PostService,
                    > tonic::server::UnaryService<super::TogglePostRequest>
                    for TogglePostSvc<T> {
                        type Response = super::TogglePostReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TogglePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PostService>::toggle_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TogglePostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/post.PostService/GetPost" => {
                    #[allow(non_camel_case_types)]
                    struct GetPostSvc<T: PostService>(pub Arc<T>);
                    impl<
                        T: PostService,
                    > tonic::server::UnaryService<super::GetPostRequest>
                    for GetPostSvc<T> {
                        type Response = super::GetPostReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PostService>::get_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: PostService> Clone for PostServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: PostService> tonic::server::NamedService for PostServiceServer<T> {
        const NAME: &'static str = "post.PostService";
    }
}
